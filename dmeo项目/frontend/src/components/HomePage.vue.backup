<template>
  <div class="homepage">
    <!-- 顶部状态栏 -->
    <div class="status-bar">
      <div class="status-item">
        <span class="status-label">连接状态:</span>
        <span :class="['status-value', isConnected ? 'connected' : 'disconnected']">
          {{ isConnected ? '已连接' : '未连接' }}
        </span>
      </div>
      <div class="status-item">
        <span class="status-label">当前区块:</span>
        <span class="status-value">{{ currentBlock || '获取中...' }}</span>
      </div>
      <div class="status-item">
        <span class="status-label">网络:</span>
        <span class="status-value">{{ networkInfo.name }}</span>
      </div>
      <div class="status-item">
        <span class="status-label">RPC:</span>
        <span class="status-value">{{ currentRpcIndex + 1 }}/{{ HOLESKY_RPCS.length }}</span>
      </div>
    </div>

    <!-- 主要内容区域 -->
    <div class="main-content">
      <!-- 左侧：区块信息 -->
      <div class="left-panel">
        <div class="panel-header">
          <h3>实时区块信息</h3>
          <div class="refresh-indicator" :class="{ active: isMonitoring }">
            <span class="dot"></span>
            {{ isMonitoring ? '监控中' : '已停止' }}
          </div>
        </div>
        
        <div class="block-info" v-if="blockData">
          <div class="info-row">
            <span class="label">区块号:</span>
            <span class="value">{{ blockData.number }}</span>
          </div>
          <div class="info-row">
            <span class="label">区块哈希:</span>
            <span class="value hash">{{ formatHash(blockData.hash) }}</span>
          </div>
          <div class="info-row">
            <span class="label">时间戳:</span>
            <span class="value">{{ formatTime(blockData.timestamp) }}</span>
          </div>
          <div class="info-row">
            <span class="label">交易数量:</span>
            <span class="value">{{ blockData.transactionCount }}</span>
          </div>
          <div class="info-row">
            <span class="label">Gas 使用:</span>
            <span class="value">{{ formatNumber(blockData.gasUsed) }} / {{ formatNumber(blockData.gasLimit) }}</span>
          </div>
          <div class="info-row">
            <span class="label">Gas 价格:</span>
            <span class="value">{{ blockData.gasPrice }} Gwei</span>
          </div>
          <div class="info-row">
            <span class="label">区块奖励:</span>
            <span class="value">{{ blockData.reward }} ETH</span>
          </div>
          <div class="info-row">
            <span class="label">区块时间:</span>
            <span class="value">{{ blockData.blockTime }}s</span>
          </div>
          <div class="info-row">
            <span class="label">TPS:</span>
            <span class="value">{{ blockData.tps }}</span>
          </div>
        </div>
        
        <div class="loading" v-else>
          <div class="spinner"></div>
          <span>正在获取区块数据...</span>
        </div>
      </div>

      <!-- 右侧：交易监控和风险分析 -->
      <div class="right-panel">
        <div class="panel-header">
          <h3>交易风险监控</h3>
          <div class="risk-stats">
            <div class="stat-item risk">
              <span class="count">{{ riskTransactions }}</span>
              <span class="label">风险交易</span>
            </div>
            <div class="stat-item blocked">
              <span class="count">{{ blockedTransactions }}</span>
              <span class="label">已拦截</span>
            </div>
          </div>
        </div>

        <!-- 交易列表 -->
        <div class="transaction-list">
          <div class="list-header">
            <span class="col-hash">交易哈希</span>
            <span class="col-from">发送方</span>
            <span class="col-to">接收方</span>
            <span class="col-value">金额</span>
            <span class="col-risk">风险评分</span>
            <span class="col-time">时间</span>
          </div>
          
          <div class="transaction-item" 
               v-for="tx in displayTransactions" 
               :key="tx.hash"
               :class="{ 'high-risk': tx.riskScore >= 70, 'blocked': tx.riskScore >= 90 }">
            <span class="col-hash">{{ formatHash(tx.hash) }}</span>
            <span class="col-from">{{ formatAddress(tx.from) }}</span>
            <span class="col-to">{{ formatAddress(tx.to) }}</span>
            <span class="col-value">{{ formatEther(tx.value) }} ETH</span>
            <span class="col-risk" :class="getRiskClass(tx.riskScore)">{{ tx.riskScore }}</span>
            <span class="col-time">{{ formatTimeAgo(tx.timestamp) }}</span>
          </div>
          
          <div class="no-transactions" v-if="displayTransactions.length === 0">
            <span>暂无交易数据</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted, onUnmounted } from 'vue'
import Web3 from 'web3'

// 响应式数据
const isConnected = ref(false)
const isMonitoring = ref(false)
const currentBlock = ref(null)
const blockData = ref(null)
const displayTransactions = ref([])
const riskTransactions = ref(0)
const blockedTransactions = ref(0)

// 定时器
let blockMonitorTimer = null
let statsTimer = null

// 网络配置
const networkInfo = ref({
  name: 'Holesky Testnet',
  chainId: 17000
})

// 多个 Holesky RPC 端点，提高连接稳定性
const HOLESKY_RPCS = [
  'https://ethereum-holesky-rpc.publicnode.com',
  'https://holesky.drpc.org',
  'https://ethereum-holesky.publicnode.com',
  'https://holesky.gateway.tenderly.co',
  'https://1rpc.io/holesky'
]

let currentRpcIndex = ref(0)
let web3 = null

// 初始化连接
const initializeConnection = async () => {
  console.log('🔄 正在初始化区块链连接...')
  
  // 尝试连接到可用的 RPC 端点，每个端点最多重试2次
  for (let attempt = 0; attempt < 2; attempt++) {
    for (let i = 0; i < HOLESKY_RPCS.length; i++) {
      const rpcUrl = HOLESKY_RPCS[i]
      console.log(`🔗 尝试连接到 RPC ${i + 1}/${HOLESKY_RPCS.length}: ${rpcUrl}`)
      
      try {
        // 设置连接超时
        const timeoutPromise = new Promise((_, reject) => 
          setTimeout(() => reject(new Error('连接超时')), 5000)
        )
        
        const connectPromise = (async () => {
          web3 = new Web3(rpcUrl)
          const blockNumber = await web3.eth.getBlockNumber()
          return blockNumber
        })()
        
        const blockNumber = await Promise.race([connectPromise, timeoutPromise])
        
        currentRpcIndex.value = i
        currentBlock.value = Number(blockNumber)
        isConnected.value = true
        
        console.log(`✅ 成功连接到 Holesky 网络! 当前区块: ${blockNumber}`)
        console.log(`📡 使用 RPC: ${rpcUrl}`)
        
        return true
      } catch (error) {
        console.warn(`⚠️ RPC ${i + 1} 连接失败:`, error.message)
        web3 = null
        isConnected.value = false
      }
    }
  }
  
  console.error('❌ 所有 RPC 端点连接失败，10秒后重试...')
  setTimeout(() => {
    initializeConnection()
  }, 10000)
  
  return false
}

// 切换到下一个 RPC 端点
const switchRpcEndpoint = () => {
  currentRpcIndex.value = (currentRpcIndex.value + 1) % HOLESKY_RPCS.length
  console.log(`🔄 切换到 RPC ${currentRpcIndex.value + 1}/${HOLESKY_RPCS.length}`)
}

// 开始区块监控
const startBlockMonitoring = async () => {
  if (!isConnected.value || !web3) {
    console.warn('⚠️ 未连接到网络，无法开始监控')
    return
  }
  
  isMonitoring.value = true
  console.log('🎯 开始区块监控...')
  
  const monitorBlocks = async () => {
    try {
      // 设置超时时间
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('获取区块号超时')), 3000)
      )
      
      const blockPromise = web3.eth.getBlockNumber()
      const latestBlock = await Promise.race([blockPromise, timeoutPromise])
      
      if (Number(latestBlock) !== currentBlock.value) {
        currentBlock.value = Number(latestBlock)
        await fetchBlockData(latestBlock)
      }
    } catch (error) {
      console.warn('⚠️ 区块监控出错:', error.message)
      isConnected.value = false
      
      // 尝试切换 RPC 并重新连接
      setTimeout(async () => {
        switchRpcEndpoint()
        await initializeConnection()
      }, 2000)
    }
  }
  
  // 立即执行一次
  await monitorBlocks()
  
  // 设置定时监控（调整为2秒间隔，减少网络压力）
  blockMonitorTimer = setInterval(monitorBlocks, 2000)
}

// 获取区块数据
const fetchBlockData = async (blockNumber) => {
  try {
    console.log(`📦 获取区块 ${blockNumber} 的详细信息...`)
    
    const [block, prevBlock] = await Promise.all([
      web3.eth.getBlock(blockNumber, true),
      blockNumber > 0 ? web3.eth.getBlock(blockNumber - 1, false) : null
    ])
    
    if (block) {
      // 安全地处理 BigInt 转换
      const blockTime = prevBlock ? 
        Number(block.timestamp) - Number(prevBlock.timestamp) : 0
      
      // 计算 TPS
      const tps = blockTime > 0 ? (block.transactions.length / blockTime).toFixed(2) : '0.00'
      
      // 获取 Gas 价格 (转换为 Gwei)
      const gasPriceWei = block.baseFeePerGas || 0n
      const gasPriceGwei = web3.utils.fromWei(String(gasPriceWei), 'gwei')
      
      blockData.value = {
        number: Number(block.number),
        hash: block.hash,
        timestamp: Number(block.timestamp) * 1000, // 转换为毫秒
        transactionCount: block.transactions.length,
        gasUsed: Number(block.gasUsed),
        gasLimit: Number(block.gasLimit),
        gasPrice: parseFloat(gasPriceGwei).toFixed(2),
        reward: calculateBlockReward(block),
        blockTime: blockTime,
        tps: tps
      }
      
      // 处理交易数据
      if (block.transactions && block.transactions.length > 0) {
        await processRealTransactions(block.transactions)
      }
      
      console.log(`✅ 区块 ${blockNumber} 数据更新完成`)
    }
  } catch (error) {
    console.error('❌ 获取区块数据失败:', error)
  }
}

// 计算区块奖励
const calculateBlockReward = (block) => {
  try {
    // Holesky 测试网的基础奖励约为 2 ETH
    const baseReward = 2.0
    
    // 根据 Gas 使用率调整奖励
    const gasUsed = Number(block.gasUsed)
    const gasLimit = Number(block.gasLimit)
    const gasUtilization = gasUsed / gasLimit
    
    // 简单的奖励计算模型
    const reward = baseReward * (1 + gasUtilization * 0.1)
    
    return reward.toFixed(4)
  } catch (error) {
    console.warn('⚠️ 计算区块奖励失败:', error)
    return '2.0000'
  }
}

// 处理真实交易数据
const processRealTransactions = async (transactions) => {
  const processedCount = Math.min(transactions.length, 3) // 限制处理数量，避免过多请求
  
  for (let i = 0; i < processedCount; i++) {
    const txHash = transactions[i]
    try {
      // 验证 txHash 是否为有效字符串
      if (!txHash || typeof txHash !== 'string') {
        console.warn('⚠️ 无效的交易哈希:', txHash)
        continue
      }
      
      // 设置超时时间
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('获取交易详情超时')), 2000)
      )
      
      const txPromise = web3.eth.getTransaction(txHash)
      const tx = await Promise.race([txPromise, timeoutPromise])
      
      if (tx) {
        const riskScore = calculateRiskScore(tx)
        const processedTx = {
          hash: tx.hash,
          from: tx.from,
          to: tx.to || '0x0000000000000000000000000000000000000000', // 合约创建交易
          value: tx.value,
          riskScore: riskScore,
          timestamp: Date.now() // 使用当前时间作为处理时间
        }
        
        // 添加到显示列表（最多显示20条）
        displayTransactions.value.unshift(processedTx)
        if (displayTransactions.value.length > 20) {
          displayTransactions.value.pop()
        }
        
        // 更新风险统计
        if (riskScore >= 70) {
          riskTransactions.value++
          if (riskScore >= 90) {
            blockedTransactions.value++
          }
        }
      }
    } catch (txError) {
      // 安全地处理 txHash，防止 slice 错误
      const hashDisplay = (txHash && typeof txHash === 'string' && txHash.length >= 10) 
        ? `${txHash.slice(0, 10)}...` 
        : String(txHash || 'unknown')
      console.warn(`⚠️ 获取交易详情失败 (${hashDisplay}):`, txError.message)
      // 如果获取失败，继续处理下一个交易
      continue
    }
    
    // 在处理之间添加小延迟，避免请求过于频繁
    if (i < processedCount - 1) {
      await new Promise(resolve => setTimeout(resolve, 100))
    }
  }
}

// 模拟交易数据（当没有真实交易时使用）
const generateMockTransaction = () => {
  const mockAddresses = [
    '0x742d35Cc6634C0532925a3b8D4C9db4C4C4C4C4C',
    '0x8ba1f109551bD432803012645Hac136c22C4C4C4',
    '0x123456789abcdef123456789abcdef123456789a',
    '0xabcdef123456789abcdef123456789abcdef12345'
  ]
  
  const randomValue = Math.random() * 10 // 0-10 ETH
  const riskScore = calculateRiskScore({
    value: web3.utils.toWei(randomValue.toString(), 'ether'),
    from: mockAddresses[Math.floor(Math.random() * mockAddresses.length)],
    to: mockAddresses[Math.floor(Math.random() * mockAddresses.length)]
  })
  
  return {
    hash: '0x' + Math.random().toString(16).substr(2, 64),
    from: mockAddresses[Math.floor(Math.random() * mockAddresses.length)],
    to: mockAddresses[Math.floor(Math.random() * mockAddresses.length)],
    value: web3.utils.toWei(randomValue.toString(), 'ether'),
    riskScore: riskScore,
    timestamp: Date.now()
  }
}

// 计算风险评分
const calculateRiskScore = (tx) => {
  let riskScore = 0
  
  try {
    // 基于交易金额的风险评估
    const valueInEth = parseFloat(web3.utils.fromWei(String(tx.value), 'ether'))
    
    if (valueInEth > 100) riskScore += 40
    else if (valueInEth > 10) riskScore += 20
    else if (valueInEth > 1) riskScore += 10
    
    // 基于地址模式的风险评估
    const fromAddr = tx.from?.toLowerCase() || ''
    const toAddr = tx.to?.toLowerCase() || ''
    
    // 检查是否为新地址或可疑模式
    if (fromAddr.includes('000000') || toAddr.includes('000000')) {
      riskScore += 15
    }
    
    // 检查是否为合约创建交易
    if (!tx.to || tx.to === '0x0000000000000000000000000000000000000000') {
      riskScore += 25
    }
    
    // 添加一些随机性来模拟复杂的风险分析
    riskScore += Math.floor(Math.random() * 30)
    
    return Math.min(riskScore, 100)
  } catch (error) {
    console.warn('⚠️ 计算风险评分失败:', error)
    return Math.floor(Math.random() * 50) // 返回一个较低的随机风险评分
  }
}

// 格式化函数
const formatEther = (value) => {
  try {
    if (!value) return '0.0000'
    const ethValue = web3.utils.fromWei(String(value), 'ether')
    return parseFloat(ethValue).toFixed(4)
  } catch (error) {
    console.warn('⚠️ 格式化 Ether 失败:', error)
    return '0.0000'
  }
}

const formatNumber = (num) => {
  if (!num) return '0'
  return Number(num).toLocaleString()
}

const formatHash = (hash) => {
  if (!hash) return ''
  return `${hash.slice(0, 10)}...${hash.slice(-8)}`
}

const formatAddress = (address) => {
  if (!address) return ''
  return `${address.slice(0, 8)}...${address.slice(-6)}`
}

const formatTime = (timestamp) => {
  if (!timestamp) return ''
  return new Date(timestamp).toLocaleString('zh-CN')
}

const formatTimeAgo = (timestamp) => {
  if (!timestamp) return ''
  const now = Date.now()
  const diff = now - timestamp
  const seconds = Math.floor(diff / 1000)
  
  if (seconds < 60) return `${seconds}秒前`
  if (seconds < 3600) return `${Math.floor(seconds / 60)}分钟前`
  if (seconds < 86400) return `${Math.floor(seconds / 3600)}小时前`
  return `${Math.floor(seconds / 86400)}天前`
}

const getRiskClass = (score) => {
  if (score >= 90) return 'blocked'
  if (score >= 70) return 'high-risk'
  if (score >= 40) return 'medium-risk'
  return 'low-risk'
}

// 生命周期
onMounted(async () => {
  console.log('🚀 DeFi 风险监控系统启动中...')
  
  // 初始化连接
  const connected = await initializeConnection()
  
  if (connected) {
    // 开始监控
    await startBlockMonitoring()
    
    // 启动统计定时器
    statsTimer = setInterval(() => {
      // 这里可以添加定期统计更新逻辑
    }, 5000)
  }
})

onUnmounted(() => {
  console.log('🛑 停止监控服务...')
  
  if (blockMonitorTimer) {
    clearInterval(blockMonitorTimer)
  }
  
  if (statsTimer) {
    clearInterval(statsTimer)
  }
  
  isMonitoring.value = false
  isConnected.value = false
})
</script>

<style scoped>
.homepage {
  min-height: 100vh;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  padding: 20px;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.status-bar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  border-radius: 15px;
  padding: 15px 25px;
  margin-bottom: 25px;
  border: 1px solid rgba(255, 255, 255, 0.2);
}

.status-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 5px;
}

.status-label {
  font-size: 12px;
  color: rgba(255, 255, 255, 0.7);
  font-weight: 500;
}

.status-value {
  font-size: 14px;
  font-weight: 600;
  color: white;
}

.status-value.connected {
  color: #4ade80;
}

.status-value.disconnected {
  color: #f87171;
}

.main-content {
  display: grid;
  grid-template-columns: 1fr 2fr;
  gap: 25px;
  height: calc(100vh - 140px);
}

.left-panel, .right-panel {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  border-radius: 20px;
  padding: 25px;
  border: 1px solid rgba(255, 255, 255, 0.2);
  overflow: hidden;
}

.panel-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 25px;
  padding-bottom: 15px;
  border-bottom: 1px solid rgba(255, 255, 255, 0.2);
}

.panel-header h3 {
  color: white;
  font-size: 18px;
  font-weight: 600;
  margin: 0;
}

.refresh-indicator {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 12px;
  color: rgba(255, 255, 255, 0.7);
}

.refresh-indicator .dot {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background: #f87171;
}

.refresh-indicator.active .dot {
  background: #4ade80;
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.5; }
}

.block-info {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.info-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 12px 15px;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 10px;
  border: 1px solid rgba(255, 255, 255, 0.1);
}

.info-row .label {
  font-size: 13px;
  color: rgba(255, 255, 255, 0.7);
  font-weight: 500;
}

.info-row .value {
  font-size: 13px;
  color: white;
  font-weight: 600;
  text-align: right;
}

.info-row .value.hash {
  font-family: 'Courier New', monospace;
  font-size: 11px;
}

.loading {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 200px;
  gap: 15px;
  color: rgba(255, 255, 255, 0.7);
}

.spinner {
  width: 40px;
  height: 40px;
  border: 3px solid rgba(255, 255, 255, 0.3);
  border-top: 3px solid white;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.risk-stats {
  display: flex;
  gap: 20px;
}

.stat-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 5px;
}

.stat-item .count {
  font-size: 20px;
  font-weight: 700;
}

.stat-item .label {
  font-size: 11px;
  color: rgba(255, 255, 255, 0.7);
}

.stat-item.risk .count {
  color: #fbbf24;
}

.stat-item.blocked .count {
  color: #f87171;
}

.transaction-list {
  height: calc(100% - 80px);
  overflow-y: auto;
}

.list-header {
  display: grid;
  grid-template-columns: 1.5fr 1fr 1fr 0.8fr 0.6fr 0.8fr;
  gap: 10px;
  padding: 12px 15px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 10px;
  margin-bottom: 15px;
  font-size: 11px;
  font-weight: 600;
  color: rgba(255, 255, 255, 0.8);
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.transaction-item {
  display: grid;
  grid-template-columns: 1.5fr 1fr 1fr 0.8fr 0.6fr 0.8fr;
  gap: 10px;
  padding: 12px 15px;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 8px;
  margin-bottom: 8px;
  font-size: 11px;
  color: white;
  border: 1px solid rgba(255, 255, 255, 0.1);
  transition: all 0.3s ease;
}

.transaction-item:hover {
  background: rgba(255, 255, 255, 0.1);
  transform: translateY(-1px);
}

.transaction-item.high-risk {
  border-left: 4px solid #fbbf24;
  background: rgba(251, 191, 36, 0.1);
}

.transaction-item.blocked {
  border-left: 4px solid #f87171;
  background: rgba(248, 113, 113, 0.1);
}

.col-hash, .col-from, .col-to {
  font-family: 'Courier New', monospace;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.col-risk {
  text-align: center;
  font-weight: 600;
}

.col-risk.low-risk { color: #4ade80; }
.col-risk.medium-risk { color: #fbbf24; }
.col-risk.high-risk { color: #fb923c; }
.col-risk.blocked { color: #f87171; }

.col-value, .col-time {
  text-align: right;
}

.no-transactions {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 200px;
  color: rgba(255, 255, 255, 0.5);
  font-style: italic;
}

/* 滚动条样式 */
.transaction-list::-webkit-scrollbar {
  width: 6px;
}

.transaction-list::-webkit-scrollbar-track {
  background: rgba(255, 255, 255, 0.1);
  border-radius: 3px;
}

.transaction-list::-webkit-scrollbar-thumb {
  background: rgba(255, 255, 255, 0.3);
  border-radius: 3px;
}

.transaction-list::-webkit-scrollbar-thumb:hover {
  background: rgba(255, 255, 255, 0.5);
}

/* 响应式设计 */
@media (max-width: 1200px) {
  .main-content {
    grid-template-columns: 1fr;
    gap: 20px;
  }
  
  .status-bar {
    flex-wrap: wrap;
    gap: 15px;
  }
}

@media (max-width: 768px) {
  .homepage {
    padding: 15px;
  }
  
  .status-bar {
    padding: 15px;
  }
  
  .left-panel, .right-panel {
    padding: 20px;
  }
  
  .list-header, .transaction-item {
    grid-template-columns: 1fr;
    gap: 5px;
  }
  
  .list-header span, .transaction-item span {
    padding: 2px 0;
  }
}
</style>