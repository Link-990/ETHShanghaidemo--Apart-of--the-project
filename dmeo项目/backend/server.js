const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const dotenv = require('dotenv');
const path = require('path');
const mongoose = require('mongoose'); // Ê∑ªÂä†mongooseÂØºÂÖ•

// üî• ÈáçË¶ÅÔºöÂÖàÂä†ËΩΩÁéØÂ¢ÉÂèòÈáèÔºåÂÜçÂØºÂÖ•ÂÖ∂‰ªñÊ®°Âùó
dotenv.config({ path: path.join(__dirname, '.env') });

// Ê∑ªÂä†Ë∞ÉËØï‰ø°ÊÅØ
console.log('üîç Ë∞ÉËØï‰ø°ÊÅØ:');
console.log('ÂΩìÂâçÂ∑•‰ΩúÁõÆÂΩï:', process.cwd());
console.log('__dirname:', __dirname);
console.log('QWEN_API_KEY ÊòØÂê¶Â≠òÂú®:', !!process.env.QWEN_API_KEY);
console.log('QWEN_API_KEY Ââç4‰Ωç:', process.env.QWEN_API_KEY ? process.env.QWEN_API_KEY.substring(0, 4) + '...' : 'undefined');
console.log('QWEN_BASE_URL:', process.env.QWEN_BASE_URL);
console.log('QWEN_MODEL:', process.env.QWEN_MODEL);

// üî• ÁéØÂ¢ÉÂèòÈáèÂä†ËΩΩÂêéÂÜçÂØºÂÖ•‰æùËµñAIÊúçÂä°ÁöÑÊ®°Âùó
const riskAnalysisRoutes = require('./src/routes/riskAnalysis');
const contractRoutes = require('./src/routes/contracts');
const poolRoutes = require('./src/routes/pools');
const aiRiskControlRoutes = require('./src/routes/aiRiskControl');
const aiMonitoringRoutes = require('./src/routes/aiMonitoringRoutes');
const { setupDatabase } = require('./src/config/database');
const { setupRedis } = require('./src/config/redis');
const logger = require('./src/utils/logger');

const app = express();
const PORT = process.env.PORT || 3001;

// ‰∏≠Èó¥‰ª∂
app.use(helmet({
    contentSecurityPolicy: {
        directives: {
            defaultSrc: ["'self'"],
            scriptSrc: ["'self'", "'unsafe-inline'", "'unsafe-eval'"],
            styleSrc: ["'self'", "'unsafe-inline'"],
            imgSrc: ["'self'", "data:", "https:"],
            connectSrc: ["'self'", "http://localhost:*", "ws://localhost:*"],
            fontSrc: ["'self'"],
            objectSrc: ["'none'"],
            mediaSrc: ["'self'"],
            frameSrc: ["'none'"],
        },
    },
    crossOriginEmbedderPolicy: false
}));

// Ê∑ªÂä†È¢ùÂ§ñÁöÑÂÆâÂÖ®Â§¥
app.use((req, res, next) => {
    res.setHeader('X-Content-Type-Options', 'nosniff');
    res.setHeader('X-Frame-Options', 'DENY');
    res.setHeader('X-XSS-Protection', '1; mode=block');
    res.setHeader('Referrer-Policy', 'strict-origin-when-cross-origin');
    next();
});

app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// Ë∑ØÁî±ÈÖçÁΩÆ
app.use('/api/risk-analysis', riskAnalysisRoutes);
app.use('/api/contracts', contractRoutes);
app.use('/api/pools', poolRoutes);
app.use('/api/ai-risk-control', aiRiskControlRoutes);
app.use('/api/ai-monitoring', aiMonitoringRoutes);

// ÂÅ•Â∫∑Ê£ÄÊü•
app.get('/health', (req, res) => {
    res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

// ÈîôËØØÂ§ÑÁêÜ
app.use((err, req, res, next) => {
    logger.error('Unhandled error:', err);
    res.status(500).json({ error: 'Internal server error' });
});

// ÂêØÂä®ÊúçÂä°Âô®
async function startServer() {
    try {
        // Â∞ùËØïËøûÊé•Êï∞ÊçÆÂ∫ìÔºå‰ΩÜ‰∏çÈòªÂ°ûÊúçÂä°ÂêØÂä®
        try {
            await setupDatabase();
            logger.info('Database connected successfully');
        } catch (dbError) {
            logger.warn('Database connection failed, continuing without database:', dbError.message);
        }
        
        // Â∞ùËØïËøûÊé•RedisÔºå‰ΩÜ‰∏çÈòªÂ°ûÊúçÂä°ÂêØÂä®
        try {
            await setupRedis();
            logger.info('Redis connected successfully');
        } catch (redisError) {
            logger.warn('Redis connection failed, continuing without Redis:', redisError.message);
        }
        
        app.listen(PORT, () => {
            logger.info(`Server running on port ${PORT}`);
            console.log(`üöÄ ÊúçÂä°Âô®ËøêË°åÂú® http://localhost:${PORT}`);
            console.log(`üìä AIÂàÜÊûêÂäüËÉΩÂ∑≤ÂêØÁî®ÔºàÈôçÁ∫ßÊ®°ÂºèÔºâ`);
        });
    } catch (error) {
        logger.error('Failed to start server:', error);
        process.exit(1);
    }
}

startServer();

// Âú®Áé∞Êúâ‰ª£Á†Å‰∏≠Ê∑ªÂä†Êï∞ÊçÆÂ∫ìËøûÊé•ÁõëÊéß
mongoose.connection.on('connected', () => {
    logger.info('‚úÖ MongoDB connected successfully');
});

mongoose.connection.on('error', (err) => {
    logger.error('‚ùå MongoDB connection error:', err);
});

mongoose.connection.on('disconnected', () => {
    logger.warn('‚ö†Ô∏è MongoDB disconnected');
});